{
	"id": "d5545acc39bc8afa55f6ca9639e99559",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"NFT-Contracts/new/NFT.sol": {
				"content": "// // SPDX-License-Identifier: MIT\r\n// // OpenZeppelin Contracts (last updated v4.7.0) \r\n\r\n// pragma solidity ^0.8.4;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// contract NFT is ERC721 {\r\n    \r\n//     uint256 public tokenCounter;\r\n//     address public owner;\r\n//     mapping(uint256 => bool) private usedNonce;\r\n//     mapping(string => bool) private tokenURIs;\r\n\r\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n//     struct Sign {\r\n//         uint8 v;\r\n//         bytes32 r;\r\n//         bytes32 s;\r\n//         uint256 nonce;\r\n//     }\r\n\r\n//     constructor (string memory tokenName, string memory tokenSymbol) ERC721 (tokenName, tokenSymbol){\r\n//         tokenCounter = 1;\r\n//         owner = msg.sender;\r\n//     }\r\n\r\n//     modifier onlyOwner() {\r\n//         require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n//         _;\r\n//     }\r\n\r\n//     function transferOwnership(address newOwner) external onlyOwner returns(bool){\r\n//         require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n//         //tx.gasprice (uint); //: gas price of the transaction\r\n//         //msg.gas (uint): remaining gas\r\n//         owner = newOwner;\r\n//         emit OwnershipTransferred(owner, newOwner);\r\n//         return true;\r\n//     }\r\n\r\n//     function verifySign(string memory tokenURI, address caller, Sign memory sign) internal view {\r\n//         bytes32 hash = keccak256(abi.encodePacked(this, caller, tokenURI, sign.nonce));\r\n//         require(owner == ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), sign.v, sign.r, sign.s), \"Owner sign verification failed\");\r\n//     }\r\n\r\n    \r\n//     /**\r\n//      * @dev Internal function to mint a new token.\r\n//      * Reverts if the given token ID already exists.\r\n//      * @param tokenURI string memory URI of the token to be minted.\r\n//      * @param fee uint256 royalty of the token to be minted.\r\n//      */\r\n\r\n//     function createNFT(string memory tokenURI, uint256 fee) external returns (uint256) {\r\n//       //  require(!usedNonce[sign.nonce], \"Nonce : Invalid Nonce\");\r\n//         require(!tokenURIs[tokenURI],\"Minting: Duplicate Minting\");\r\n//       //  usedNonce[sign.nonce] = true;\r\n//         uint256 newItemId = tokenCounter;\r\n//       //  verifySign(tokenURI, msg.sender, sign);\r\n//         _safeMint(msg.sender, newItemId, fee);\r\n//         _setTokenURI(newItemId, tokenURI);\r\n//         tokenURIs[tokenURI] = true;\r\n//         tokenCounter = tokenCounter + 1;\r\n//         return newItemId;\r\n//     }\r\n\r\n//     function setBaseURI(string memory _baseURI) external onlyOwner{\r\n//         _setBaseURI(_baseURI);\r\n//     }\r\n    \r\n//     function burn(uint256 tokenId) external {\r\n//         require(_exists(tokenId), \"ERC721: nonexistent token\");\r\n//         _burn(tokenId);\r\n//     }\r\n// }"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.7;\"\n--> NFT-Contracts/new/NFT.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.7;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "NFT-Contracts/new/NFT.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"NFT-Contracts/new/NFT.sol": {
				"ast": {
					"absolutePath": "NFT-Contracts/new/NFT.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "2942:0:0"
				},
				"id": 0
			}
		}
	}
}